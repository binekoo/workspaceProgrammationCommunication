Notes sur les programmes et les erreurs :

1. Le receveur attends un paquet, mais l'émetteur ne demande pas à l'utilisateur d'entrer un message...
2. Quand on lance le receiveur avant le sender, erreur : l'adresse IP est "already in use".

Classe message : on  a deux classes defférentes dans client et serveur: regarder constructeurs

Serveur : pas beosin de se deconnecter de la BD apres chaque requete

Dans la classe main server :
public void run() throws ClassNotFoundException{
        byte[] body = new byte[this.packetSize];
        while(this.active){
            DatagramPacket packet = new DatagramPacket(body, body.length);
            try{
                this.socket.receive(packet);
                processRequest(packet.getData());
                saveMessage()
                processResponse()
            } catch(IOException ioe){
                mainLog.error(ioe.getMessage());
            }
        }
    }
    --> sequentiel non concurrent donc ça va pas.
    Une seule requete apres l'autre : prend trop de temps

    Plus faire de new threads : (oracle veut plus) trop inclusif et ne s'adapte pas bien aux plateformes
    Utiliser la classe ExecutorService en utilisant la classe Executors
    Qu'est ce qu'un Executor service ? Thread non inclusif, meilleur que la méthode thread de base.
    Executors : https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html
    Classe qui se termine par un "s" et donc qui contient des méthodes static
    newSingleThreadExecutor() -> renvoie un ExecutorService qui est un cas particulier d'Executor.
    --> créer un executant, revient au meme que rien faire car revient à etre séquentiel.
    On veut un POOL d'éxécutants borné : pour pouvoir traiter des requetes concurrentielles.

    newFixedThreadPoolint (nThreads)
    Pq on veut etre borné ? Nombre de threads tjr borné su rune machine. Besoin de borne pour en pas être dans un systeme non contraint pour eviter un overflow.
    --> possible de créer nThreads exécutants.
    on peut executer au plus nthreads executants mais ca ne veut pas dire qu'ils sont crées. Cest juste le nombre max de threads a executer
    Si nombre de thread > nThreads : ceux en plus attendent qu'un des threads soit fini.

    --> Executors permet de mettre en place une statégie d'execution

    Pour executer un thread : méthode submit(Callable<T> task).
    Classe Callable à faire qui va contenir requestMessage(), save(), processResponse()

    Créer une connexion :
    enregistrer le driver


    22/02 :
    Messages formatés sur un protocole UDP + paquet JSon
    Manque : sauvegarde et réponse.

    Pour l'instant:
     client : msg.number = 0
              msg.info = default

    Pas d'enregistrement en BDD.
    En base : table avec des attributs du tyoe : id, number, info
    Dans pom.xml : commandes d'execution.

    Classe RequestBehaviour implemente callable() : cote serveur : autant de threads que de clients.

    Pour faire une connexion : faire un statement ou un preparedStatemennt pour faire un insert :
    on a "id" typé SERIAL donc on le calcule pas.
    On fait : INSERT INTO messages (number, info) values (?,?);
    --> dans le fichier de Properties car texte rien à faire dans les fichiers java

   Sur pg Admin :
   truncate table + table [truncate table messages]
   --> permet de vider la table en gardant la structure.

    Pour faire le retour (ACK) du Serveur vers le client.
    Besoin de faire un DP et serialiser le message coté client

    1. Créer une classe Reponse qui contient les données du dernier INSERT.
    Problème : comment savoir quel est le dernier INSERT : on a plusieurs clients donc si un autre client envoie un message entre deux on enverra l'ACK au mauvais client.
    --> il faut récupérer l'ID associé et non le dernier ID.
    2.Créer la méthode ProcessResponse()
    2b. Créer un DatagraPacket dans ProcessResponse().
    Problème : DP se créer avec un contenu binaire, une adresse IP et un port. Mais dans les props du client : adresse IP et port de la machine actuelle.
    En tant que Serveur : bete de garder en props toutes les adresses de tous les clients. Voir dans le doc de DP si l'emetteur du paquet peut transmettre
    son adresse pour pouvoir lui répondre.
    --> Comment ajouter l'adresse et le port du client ?
    [Conséquence : ] 3. Modificaton du client (Commencer par ça car tant que la classe n'est pas modifiée on peut rien faire).
    Solution : dans le message, envoyer l'adresse IP et le numero de port et les stocker en base. Quand le message arrive dans Callable(), on  a déjà les bonnes info -> pas besoin de modifier le serveur.
    Ajout des attributs fromIp et fromPort dans la classe Message côté Client. (OK)
    Modifier la classe Main pour ajouter les infos (OK).

Dans le serveur :
    4a. Modifier la classe Message.
    4b. Créer une response. Utiliser "Return" en SQL pour récupérer l'id
    4c. Créer un DP pour la réponse.
    4d. Créer une DS pour la réponse.